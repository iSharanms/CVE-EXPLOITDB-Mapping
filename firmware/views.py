from __future__ import print_function
from django.contrib.auth import authenticate, login
from django.contrib.auth import logout
from django.http import JsonResponse
from django.shortcuts import render, get_object_or_404
from django.db.models import Q
from .forms import firmwaremappingForm, UploadForm
from .models import firmwaremapping
from .firmwaresearch import handle_uploaded_file


UPLOAD_FILE_TYPES = ['bin','jar']
CUSTOM_FILE_TYPES = ['txt']


def create_firmwaremapping(request):
        form = firmwaremappingForm(request.POST or None, request.FILES or None)
        if form.is_valid():
            firmwaremapping = form.save(commit=False)
            firmwaremapping.firmwaremapping_logo = request.FILES['firmwaremapping_logo']
            firmwaremapping.keywords_custom = request.POST['keywords_custom']
#            print("Hello"+firmwaremapping.keywords_custom+"test")
            file_type = firmwaremapping.firmwaremapping_logo.url.split('.')[-1]
            file_type = file_type.lower()
            print(file_type)
            print(firmwaremapping.keywords_custom)
            if not firmwaremapping.keywords_custom :
                context = {
                    'firmwaremapping': firmwaremapping,
                    'form': form,
                    'error_message': 'No Custom Keyword Provided',
                }
                #return subprocess.check_output(['python', 'firmwaresearch.py', handle_uploaded_file("1")]).decode('utf-8')
                return render(request, 'firmware/create_firmwaremapping.html', context)

            if (file_type not in UPLOAD_FILE_TYPES) :
                context = {
                    'firmwaremapping': firmwaremapping,
                    'form': form,
                    'error_message': 'Unsupported Firmware File Format Selected',
                }
                #return subprocess.check_output(['python', 'firmwaresearch.py', handle_uploaded_file("1")]).decode('utf-8')
                return render(request, 'firmware/create_firmwaremapping.html', context)
            firmwaremapping.save()
            handle_uploaded_file(request,firmwaremapping.firmwaremapping_logo.url,firmwaremapping.keywords_custom)
            dict1={'total':'','found':'','exploitdb':'','nmap':''}
            fin=[]
            #firmwaremapping.artist=handle_uploaded_file(request,firmwaremapping.artist, firmwaremapping.firmwaremapping_logo.url,firmwaremapping.update_check, firmwaremapping.choice)
#            firmwaremapping.choice=fin[2]
#            firmwaremapping.genre=fin[3]
            return render(request, 'firmware/detail.html', {'firmwaremapping': firmwaremapping})
        context = {
            "form": form,
        }
        return render(request, 'firmware/create_firmwaremapping.html', context)



def create_file(request):
        form = UploadForm(request.POST or None, request.FILES or None)
        if form.is_valid():
            files = form.save(commit=False)
            files.file = request.FILES
            files.save()
            return render(request, 'firmware/index.html', {'file': files})
        context = {
            'form': form,
        }
        return render(request, 'firmware/index.html', context)


def delete_firmwaremapping(request, firmwaremapping_id):
    firmwaremapping = firmwaremapping.objects.get(pk=firmwaremapping_id)
    firmwaremapping.delete()
    firmwaremappings = firmwaremapping.objects.filter(user=request.user)
    return render(request, 'firmware/index.html', {'firmwaremappings': firmwaremappings})


def delete_song(request, firmwaremapping_id, song_id):
    firmwaremapping = get_object_or_404(firmwaremapping, pk=firmwaremapping_id)
    song = Song.objects.get(pk=song_id)
    song.delete()
    return render(request, 'firmware/detail.html', {'firmwaremapping': firmwaremapping})


def detail(request, firmwaremapping_id):
    if not request.user.is_authenticated():
        return render(request, 'firmware/login.html')
    else:
        user = request.user
        firmwaremapping = get_object_or_404(firmwaremapping, pk=firmwaremapping_id)
        return render(request, 'firmware/detail.html', {'firmwaremapping': firmwaremapping, 'user': user})


def favorite(request, song_id):
    song = get_object_or_404(Song, pk=song_id)
    try:
        if song.is_favorite:
            song.is_favorite = False
        else:
            song.is_favorite = True
        song.save()
    except (KeyError, Song.DoesNotExist):
        return JsonResponse({'success': False})
    else:
        return JsonResponse({'success': True})


def favorite_firmwaremapping(request, firmwaremapping_id):
    firmwaremapping = get_object_or_404(firmwaremapping, pk=firmwaremapping_id)
    try:
        if firmwaremapping.is_favorite:
            firmwaremapping.is_favorite = False
        else:
            firmwaremapping.is_favorite = True
        firmwaremapping.save()
    except (KeyError, firmwaremapping.DoesNotExist):
        return JsonResponse({'success': False})
    else:
        return JsonResponse({'success': True})


def index(request):
    if not request.user.is_authenticated():
        return render(request, 'firmware/login.html')
    else:
        firmwaremappings = firmwaremapping.objects.filter(user=request.user)
        song_results = Song.objects.all()
        query = request.GET.get("q")
        if query:
            firmwaremappings = firmwaremappings.filter(
                Q(firmwaremapping_title__icontains=query) |
                Q(artist__icontains=query)
            ).distinct()
            song_results = song_results.filter(
                Q(song_title__icontains=query)
            ).distinct()
            return render(request, 'firmware/index.html', {
                'firmwaremappings': firmwaremappings,
                'songs': song_results,
            })
        else:
            return render(request, 'firmware/index.html', {'firmwaremappings': firmwaremappings})


def logout_user(request):
    logout(request)
    form = UserForm(request.POST or None)
    context = {
        "form": form,
    }
    return render(request, 'firmware/login.html', context)


def login_user(request):
    if request.method == "POST":
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                firmwaremappings = firmwaremapping.objects.filter(user=request.user)
                return render(request, 'firmware/index.html', {'firmwaremappings': firmwaremappings})
            else:
                return render(request, 'firmware/login.html', {'error_message': 'Your account has been disabled'})
        else:
            return render(request, 'firmware/login.html', {'error_message': 'Invalid login'})
    return render(request, 'firmware/login.html')


def register(request):
    form = UserForm(request.POST or None)
    if form.is_valid():
        user = form.save(commit=False)
        username = form.cleaned_data['username']
        password = form.cleaned_data['password']
        user.set_password(password)
        user.save()
        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                firmwaremappings = firmwaremapping.objects.filter(user=request.user)
                return render(request, 'firmware/index.html', {'firmwaremappings': firmwaremappings})
    context = {
        "form": form,
    }
    return render(request, 'firmware/register.html', context)


def songs(request, filter_by):
    if not request.user.is_authenticated():
        return render(request, 'firmware/login.html')
    else:
        try:
            song_ids = []
            for firmwaremapping in firmwaremapping.objects.filter(user=request.user):
                for song in firmwaremapping.song_set.all():
                    song_ids.append(song.pk)
            users_songs = Song.objects.filter(pk__in=song_ids)
            if filter_by == 'favorites':
                users_songs = users_songs.filter(is_favorite=True)
        except firmwaremapping.DoesNotExist:
            users_songs = []
        return render(request, 'firmware/songs.html', {
            'song_list': users_songs,
            'filter_by': filter_by,
        })
