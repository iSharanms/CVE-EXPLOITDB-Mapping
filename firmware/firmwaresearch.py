import os,sys
import glob
import fnmatch
import subprocess

def static(path):
	f=open('result.txt','wb+')
	print("\033[1;31m[==============================>Operating System Information<=========================]\033[1;m")
	for root,sub,files in os.walk(path):
			for file in files:
				if file=="issue" or file=="version":
					print(str(root)+'/'+str(file))
					#f.write(str(root)+'/'+str(file)+"\n")
	print("\033[1;31m[==============================>Search Information<=================================]\033[1;m")
	for root,sub,files in os.walk(path):
			for file in files:
				file=os.path.join(root,file)
				if os.path.isfile(file):
					with open(file) as f:
						for num,line in enumerate(f,1):
							if "password=" in line or "passwd=" in line:
								#print file+":"+str(num)+"\n"+line+"\n"
								print(file+":"+str(num))
	print("\033[1;31m[==============================>Crontab Information<==================================]\033[1;m")
	for root,sub,files in os.walk(path):
			for file in files:
				#file=os.path.join(root,file)
				if os.path.isfile(file):
					if file=="crontab":
						print(str(root)+'/'+str(file))
						#f.write(str(root)+'/'+str(file)+"\n")
	print("\033[1;31m[==============================>Information Files<====================================]\033[1;m")
	for root, dirs, files in os.walk(path):
		for filename in files:
			if filename.lower().endswith(('.ini', '.plist')):
				print(os.path.join(root,filename))
				#f.write(os.path.join(root,filename)+"\n")
	print("\033[1;31m[==============================>Log Files<===========================================]\033[1;m")
	for root, dirs, files in os.walk(path):
		for filename in files:
			if filename.lower().endswith(('.log')):
				print(os.path.join(root,filename))
				#f.write(os.path.join(root,filename)+"\n")
	print("\033[1;31m[==============================>Configuration Files<==================================]\033[1;m")
	for root, dirs, files in os.walk(path):
		for filename in files:
			if filename.lower().endswith(('.conf', '.cfg', '.cnf','.config','.default','.env','.master')):
				print(os.path.join(root,filename))
				#f.write(os.path.join(root,filename)+"\n")
	print("\033[1;31m[==============================>Certificates Files<===================================]\033[1;m")
	for root, dirs, files in os.walk(path):
		for filename in files:
			if filename.lower().endswith(('.pub', '.pem','.key','.crt')):
				print(os.path.join(root,filename))
				#f.write(os.path.join(root,filename)+"\n")
	print("\033[1;31m[==============================>Script Files<=========================================]\033[1;m")
	for root, dirs, files in os.walk(path):
		for filename in files:
			if filename.lower().endswith(('.script', '.sh','.orig')):
				print(os.path.join(root,filename))
				#f.write(os.path.join(root,filename)+"\n")
	print("\033[1;31m[==============================>Webserver Installed<==================================]\033[1;m")
	for root,sub,files in os.walk(path):
			for file in files:
				if file=="lighttpd":
					print(str(root)+'/'+str(file))
					#f.write(os.path.join(root,file)+"\n")
	print("\033[1;31m[==============================>Database Installed<===================================]\033[1;m")
	for root,sub,files in os.walk(path):
			for file in files:
				if file=="sqlite3" or file=="mysql":
					print(str(root)+'/'+str(file))
					#f.write(os.path.join(root,file)+"\n")

	print("\033[1;31m[==============================>SSH Related File<=====================================]\033[1;m")
	for root,sub,files in os.walk(path):
			for file in files:
				if file=="sshd_config" or file=="ssh_config" or file=="ssh_host_rsa_key" or file=='ssh_host_dsa_key' or file=="ssh_host_key" or file=="authorized_keys" or file=="id_rsa" or file=="id_dsa" or file=="host_key" :
					print(str(root)+'/'+str(file))
					#f.write(os.path.join(root,file)+"\n")
	#f.write("[==============================>Sensitive Files<===============================]\n")
	print("\033[1;31m[==============================>Sensitive Files<======================================]\033[1;m")
	for root,sub,files in os.walk(path):
			for file in files:
				if file=="passwd" or file=="shadow" or file=="group" or file.lower().endswith(('.passwd')):
					print(str(root)+'/'+str(file))
					#f.write(os.path.join(root,file)+"\n")

	#f.write("[==============================>Database Files<===============================]\n")
	print("\033[1;31m[==============================>Database Files<=======================================]\033[1;m")
	for root, dirs, files in os.walk(path):
		for filename in files:
			if filename.lower().endswith(('.sqlite','.sql','.db','database')):
				print(os.path.join(root,filename))
				#f.write(os.path.join(root,filename)+"\n")

	#f.write("[==============================>Compressed Files<===============================]\n")
	print("\033[1;31m[==============================>Compressed Files<=====================================]\033[1;m")
	for root, dirs, files in os.walk(path):
		for filename in files:
			if filename.lower().endswith(('.gz','.bin','.jar')):
				print(os.path.join(root,filename))
				#f.write(os.path.join(root,filename)+"\n")

	#f.write("[==============================>Windows Files<===============================]\n")
	print("\033[1;31m[==============================>Windows Files<========================================]\033[1;m")
	for root, dirs, files in os.walk(path):
		for filename in files:
			if filename.lower().endswith(('.dll','.cab')):
				print(os.path.join(root,filename))
				#f.write(os.path.join(root,filename)+"\n")

	#f.write("[==============================>Server Language Supported<===============================]\n")
	print("\033[1;31m[==============================>Server Language Supported<============================]\033[1;m")
	for root,sub,files in os.walk(path):
		for file in files:
			if file=="perl" or file=="python" or file=="php" or file=="curl" or file=="ruby":
				print(str(root)+'/'+str(file))
				##f.write(root+'/'+file+'\n')

	##f.write("[==============================>Important Binaries<===============================]\n")
	print("\033[1;31m[==============================>Important Binaries<===================================]\033[1;m")
	for root,sub,files in os.walk(path):
		for file in files:
			if file=="telnet" or file=="telnetd" or file=="ssh" or file=="nc" or file=="sshd" or file=="wget" or file=="busybox" or file=="dropbear":
				print(str(root)+'/'+str(file))
				##f.write(root+'/'+file+'\n')

	##f.write("[==============================>Other Binaries<===============================]\n")
	print("\033[1;31m[==============================>Other Binaries<=======================================]\033[1;m")
	for root,sub,files in os.walk(path):
		for file in files:
			if file=="crond" or file=="ntpd" or file=="smbd" or file=="tcpdump":
				print(str(root)+'/'+str(file))
				##f.write(root+'/'+file+'\n')

	##f.write("[==============================>Available Terminals<===============================]\n")
	print("\033[1;31m[==============================>Available Terminals<==================================]\033[1;m")
	for root,sub,files in os.walk(path):
		for file in files:
			if file=="bash" or file=="sh" or file=="zsh" or file=="ksh" or file=="tcsh":
				print(str(root)+'/'+str(file))
				##f.write(root+'/'+file+'\n')
	##f.write("[==============================>Available Home Folders<===============================]\n")
	print("\033[1;31m[==============================>Available Home Folders<===============================]\033[1;m")
	for root,sub,files in os.walk(path):
		for dirs in sub:
			if dirs=="home":
				subpath=root+'/'+dirs
				total=os.listdir(subpath)
				for dirs in total:
					print(str(subpath)+'/'+str(dirs))
					#f.write(str(subpath)+'/'+str(dirs)+"\n")

def handle_uploaded_file(request,file1,keywords_custom):
        choice='n'
        fullpath=os.getcwd()+file1
        base_folder,file1=os.path.split(fullpath)
        extracted_folder=base_folder+"/_"+file1+".extracted/"
        print("Full Path"+fullpath+"\n"+"Base Folder"+base_folder+"\nExtracted Folder"+extracted_folder+"\nFile Name"+file1+"\nKeyword Custom"+keywords_custom)
#        sys.exit(0)
        if os.path.isfile(fullpath):
             if choice=='n':
                os.system('rm -r '+extracted_folder+' 2>/dev/null')
                print("Extracted Folder:"+extracted_folder)
                print("Binwalk Extraction Initiated"+os.getcwd())
                command='binwalk -Mre '+file1+' -C '+base_folder+' 2>/dev/null'
                process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
                #p=process.communicate()[0]
		        #print p
                process.wait()
             if os.path.isdir(extracted_folder):
                print("Extraction Completed... Static Analysis Initiated...")
                static(extracted_folder)
